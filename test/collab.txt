printf function


/*
Write a function that produces output according to a format.

    Prototype: int _printf(const char *format, ...);
    Returns: the number of characters printed (excluding the null byte used to end output to strings)
    write output to stdout, the standard output stream
    format is a character string. The format string is composed of zero or more directives. See man 3 printf for more detail. You need to handle the following conversion specifiers:
        c
        s
        %
    You don’t have to reproduce the buffer handling of the C library printf function
    You don’t have to handle the flag characters
    You don’t have to handle field width
    You don’t have to handle precision
    You don’t have to handle the length modifiers*/



int _printf(const char *format, ...)
{	
	//create character_variable
	//va_list format;
	//Check NULL for separator
	//va_start
	
	//for loop with n as length
		if format[i] == %, check whether it is a string or a character
			if format[i + 1] == s, it's a string, print the string
				string_lenght is lenght of va_arg
				for loop with string_length
					putchar until we encounter \0
			else if format[i + 1] == c, then it's a char
				putchar va_arg 
		
		else print, putchar format[i] until we get to \0
	
		increase character_variable by 1
	
	//va_start
}

int _putchar(char c)
{
		return (write(1, &c, 1));
}
